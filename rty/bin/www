#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('rty:server');
var http = require('http');

var s;
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
var io=require("socket.io")(server);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening)
var a=0;

io.on("connection",function (socket) {
     function asa(nd,un){
         this.nd=nd;
         this.un=un;
     }
    console.log("co nguoi ket noi"+socket.id);
    console.log(socket.adapter.rooms);
var arr=[];
socket.on("tk",function (data) {
    socket.join(data.mamusic);
    socket.phong=data.mamusic;



        io.sockets.in(socket.phong).emit("server-send",{un:data.tkdn1,nd:data.nd1});





})

   // socket.on("tk",function (data) {
     //   a.push(data);
   //     socket.Username=data;

   //     console.log("sasasa"+data);


   // })
  //  socket.on("tl",function (data1) {

   //     io.sockets.emit("respon",{un:data1.nd,nd:data1.tkdn});
  //  })

   // socket.on("disconnect",function(){
     //   console.log(socket.id+"ngat ket noi");
   // });
})
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
